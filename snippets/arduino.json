{
  "Arduino Setup and Loop": {
    "prefix": ["setupLoop"],
    "body": [
      "void setup() {",
      "  ${1:// Initialization code here}",
      "}",
      "",
      "void loop() {",
      "  ${2:// Main code here}",
      "}"
    ]
  },
  "Set Pin Mode": {
    "prefix": ["pinMode"],
    "body": "pinMode(${1:pin}, ${2:OUTPUT});"
  },
  "Digital Write": {
    "prefix": ["digitalWrite"],
    "body": "digitalWrite(${1:pin}, ${2:HIGH});"
  },
  "Digital Read": {
    "prefix": ["digitalRead"],
    "body": "int ${1:buttonState} = digitalRead(${2:pin});"
  },
  "Analog Read": {
    "prefix": ["analogRead"],
    "body": "int ${1:sensorValue} = analogRead(${2:pin});"
  },
  "Analog Write": {
    "prefix": ["analogWrite"],
    "body": "analogWrite(${1:pin}, ${2:value});"
  },
  "Delay": {
    "prefix": ["delay"],
    "body": "delay(${1:1000});"
  },
  "Millis": {
    "prefix": ["millis"],
    "body": "unsigned long ${1:currentMillis} = millis();"
  },
  "Attach Interrupt": {
    "prefix": ["attachInterrupt"],
    "body": "attachInterrupt(digitalPinToInterrupt(${1:pin}), ${2:ISR}, ${3:CHANGE});"
  },
  "Detach Interrupt": {
    "prefix": ["detachInterrupt"],
    "body": "detachInterrupt(digitalPinToInterrupt(${1:pin}));"
  },
  "Serial Begin": {
    "prefix": ["serialBegin"],
    "body": "Serial.begin(${1:9600});"
  },
  "Serial Print": {
    "prefix": ["serialPrint"],
    "body": "Serial.print(${1:message});"
  },
  "Serial Println": {
    "prefix": ["serialPrintln"],
    "body": "Serial.println(${1:message});"
  },
  "Serial Read": {
    "prefix": ["serialRead"],
    "body": "int ${1:incomingByte} = Serial.read();"
  },
  "Serial Available": {
    "prefix": ["serialAvailable"],
    "body": [
      "if (Serial.available() > 0) {",
      "  ${1:// Code to execute when data is available}",
      "}"
    ]
  },
  "Tone": {
    "prefix": ["tone"],
    "body": "tone(${1:pin}, ${2:frequency}, ${3:duration});"
  },
  "No Tone": {
    "prefix": ["noTone"],
    "body": "noTone(${1:pin});"
  },
  "Map": {
    "prefix": ["map"],
    "body": "long ${1:outputValue} = map(${2:value}, ${3:fromLow}, ${4:fromHigh}, ${5:toLow}, ${6:toHigh});"
  },
  "Constrain": {
    "prefix": ["constrain"],
    "body": "int ${1:constrainedValue} = constrain(${2:value}, ${3:low}, ${4:high});"
  },
  "Random Seed": {
    "prefix": ["randomSeed"],
    "body": "randomSeed(${1:analogRead(${2:pin})});"
  },
  "Random": {
    "prefix": ["random"],
    "body": "long ${1:randNumber} = random(${2:min}, ${3:max});"
  },
  "PulseIn": {
    "prefix": ["pulseIn"],
    "body": "unsigned long ${1:duration} = pulseIn(${2:pin}, ${3:HIGH});"
  },
  "I2C Begin": {
    "prefix": ["i2cBegin"],
    "body": "Wire.begin();"
  },
  "I2C Begin Transmission": {
    "prefix": ["i2cBeginTransmission"],
    "body": "Wire.beginTransmission(${1:address});"
  },
  "I2C Write": {
    "prefix": ["i2cWrite"],
    "body": "Wire.write(${1:data});"
  },
  "I2C End Transmission": {
    "prefix": ["i2cEndTransmission"],
    "body": "Wire.endTransmission();"
  },
  "I2C Request From": {
    "prefix": ["i2cRequestFrom"],
    "body": "Wire.requestFrom(${1:address}, ${2:quantity});"
  },
  "SPI Begin": {
    "prefix": ["spiBegin"],
    "body": "SPI.begin();"
  },
  "SPI Transfer": {
    "prefix": ["spiTransfer"],
    "body": "SPI.transfer(${1:data});"
  },
  "SPI End": {
    "prefix": ["spiEnd"],
    "body": "SPI.end();"
  },
  "EEPROM Write": {
    "prefix": ["eepromWrite"],
    "body": "EEPROM.write(${1:address}, ${2:value});"
  },
  "EEPROM Read": {
    "prefix": ["eepromRead"],
    "body": "byte ${1:value} = EEPROM.read(${2:address});"
  },
  "Read Temperature Sensor (DHT)": {
    "prefix": ["readDHT"],
    "body": [
      "float ${1:temperature} = dht.readTemperature();",
      "float ${2:humidity} = dht.readHumidity();",
      "if (isnan(${1:temperature}) || isnan(${2:humidity})) {",
      "  Serial.println(\"Failed to read from DHT sensor!\");",
      "} else {",
      "  Serial.print(\"Humidity: \");",
      "  Serial.print(${2:humidity});",
      "  Serial.print(\"%  Temperature: \");",
      "  Serial.print(${1:temperature});",
      "  Serial.println(\"*C \");",
      "}"
    ]
  },
  "Control Servo Motor": {
    "prefix": ["servoControl"],
    "body": [
      "servo.attach(${1:pin});",
      "servo.write(${2:angle});",
      "delay(${3:1000});"
    ]
  },
  "Ultrasonic Sensor Read": {
    "prefix": ["ultrasonicRead"],
    "body": [
      "long duration, distance;",
      "digitalWrite(${1:trigPin}, LOW);",
      "delayMicroseconds(2);",
      "digitalWrite(${1:trigPin}, HIGH);",
      "delayMicroseconds(10);",
      "digitalWrite(${1:trigPin}, LOW);",
      "duration = pulseIn(${2:echoPin}, HIGH);",
      "distance = (duration / 2) / 29.1;",
      "Serial.print(\"Distance: \");",
      "Serial.print(distance);",
      "Serial.println(\" cm\");",
      "delay(${3:100});"
    ]
  },
  "OLED Display Print": {
    "prefix": ["oledPrint"],
    "body": [
      "display.clearDisplay();",
      "display.setTextSize(${1:size});",
      "display.setTextColor(WHITE);",
      "display.setCursor(${2:x}, ${3:y});",
      "display.print(${4:message});",
      "display.display();"
    ]
  },
  "MQTT Connect": {
    "prefix": ["mqttConnect"],
    "body": [
      "if (!client.connected()) {",
      "  Serial.print(\"Connecting to MQTT...\");",
      "  if (client.connect(${1:clientId})) {",
      "    Serial.println(\"connected\");",
      "    client.subscribe(${2:topic});",
      "  } else {",
      "    Serial.print(\"failed, rc=\");",
      "    Serial.print(client.state());",
      "    Serial.println(\" try again in 5 seconds\");",
      "    delay(5000);",
      "  }",
      "}"
    ]
  },
  "MQTT Publish": {
    "prefix": ["mqttPublish"],
    "body": "client.publish(${1:topic}, ${2:message});"
  },
  "WiFi Connect": {
    "prefix": ["wifiConnect"],
    "body": [
      "Serial.print(\"Connecting to \");",
      "Serial.println(${1:ssid});",
      "WiFi.begin(${1:ssid}, ${2:password});",
      "while (WiFi.status() != WL_CONNECTED) {",
      "  delay(1000);",
      "  Serial.print(\".\");",
      "}",
      "Serial.println(\"\");",
      "Serial.println(\"WiFi connected\");",
      "Serial.println(\"IP address: \");",
      "Serial.println(WiFi.localIP());"
    ]
  },

  "NanitLib Begin": {
    "prefix": ["nanitBegin"],
    "body": "Nanit.begin(${1:config});"
  },
  "NanitLib Read Sensor": {
    "prefix": ["nanitReadSensor"],
    "body": "float ${1:sensorValue} = Nanit.readSensor(${2:sensorId});"
  },
  "NanitLib Write Actuator": {
    "prefix": ["nanitWriteActuator"],
    "body": "Nanit.writeActuator(${1:actuatorId}, ${2:value});"
  },
  "NanitLib Set Parameter": {
    "prefix": ["nanitSetParameter"],
    "body": "Nanit.setParameter(${1:paramName}, ${2:paramValue});"
  },
  "NanitLib Get Parameter": {
    "prefix": ["nanitGetParameter"],
    "body": "auto ${1:paramValue} = Nanit.getParameter(${2:paramName});"
  },
  "NanitLib Start Timer": {
    "prefix": ["nanitStartTimer"],
    "body": "Nanit.startTimer(${1:timerId}, ${2:duration});"
  },
  "NanitLib Stop Timer": {
    "prefix": ["nanitStopTimer"],
    "body": "Nanit.stopTimer(${1:timerId});"
  },
  "NanitLib Log Message": {
    "prefix": ["nanitLog"],
    "body": "Nanit.log(${1:LOG_LEVEL}, ${2:message});"
  },
  "NanitLib Connect to Server": {
    "prefix": ["nanitConnectServer"],
    "body": "Nanit.connectServer(${1:serverAddress}, ${2:port});"
  },
  "NanitLib Disconnect from Server": {
    "prefix": ["nanitDisconnectServer"],
    "body": "Nanit.disconnectServer();"
  },
  "NanitLib Send Data": {
    "prefix": ["nanitSendData"],
    "body": "Nanit.sendData(${1:data});"
  },
  "NanitLib Receive Data": {
    "prefix": ["nanitReceiveData"],
    "body": "auto ${1:data} = Nanit.receiveData();"
  },
  "NanitLib Sleep": {
    "prefix": ["nanitSleep"],
    "body": "Nanit.sleep(${1:duration});"
  },
  "NanitLib Base Start": {
    "prefix": ["nanitBaseStart"],
    "body": "Nanit_Base_Start(${1:baseConfig});"
  },
  "NanitLib Base Stop": {
    "prefix": ["nanitBaseStop"],
    "body": "Nanit_Base_Stop();"
  },
  "NanitLib Set Mode": {
    "prefix": ["nanitSetMode"],
    "body": "Nanit.setMode(${1:mode});"
  },
  "NanitLib Reset": {
    "prefix": ["nanitReset"],
    "body": "Nanit.reset();"
  }
}
